<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yoshiori.github.io]]></title>
  <link href="http://yoshiori.github.io/atom.xml" rel="self"/>
  <link href="http://yoshiori.github.io/"/>
  <updated>2014-02-13T20:55:10+09:00</updated>
  <id>http://yoshiori.github.io/</id>
  <author>
    <name><![CDATA[Yoshiori SHOJI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「何故クックパッドのサービス開発は日々進化しているのか」という発表をしました。]]></title>
    <link href="http://yoshiori.github.io/blog/2014/02/13/how-we-cook-cookpad-dot-com/"/>
    <updated>2014-02-13T20:48:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2014/02/13/how-we-cook-cookpad-dot-com</id>
    <content type="html"><![CDATA[<p>デブサミで「<a href="http://event.shoeisha.jp/devsumi/20140213/session/377/">何故クックパッドのサービス開発は日々進化しているのか</a>」というタイトルで発表させていただきました。</p>

<p>資料はこちら</p>

<script async class="speakerdeck-embed" data-id="8cc658a076ac013148646268bd6e389b" data-ratio="1.33333333333333" src="http://yoshiori.github.io//speakerdeck.com/assets/embed.js"></script>


<p>発表している時の僕のユーザーさんは聞いてくれている人とこの資料を見てくれている人なので少しでも楽しんでいただけたら嬉しいなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アクセルを踏むためのテストとブレーキを踏むためのテスト]]></title>
    <link href="http://yoshiori.github.io/blog/2014/01/14/drive-a-go-go/"/>
    <updated>2014-01-14T23:12:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2014/01/14/drive-a-go-go</id>
    <content type="html"><![CDATA[<p><a href="http://rebuild.fm/29/">Rebuild.fm#29</a> 聴いてて少し語りたくなってるので書いてみる。</p>

<p><a href="http://kenn.hatenablog.com/entry/2014/01/03/095026">テスト考2014 &ndash; Hidden in Plain Sight</a> から発してると認識してるんだけど新年早々テストについて盛り上がってますね！</p>

<p>で、個人的な意見を書くまえに、俺はテストどころかコンピュータサイエンスも学んだ事ない人間ですので色々見当違いな事言ってるかもしれないけど、エンジニアのスタートが組み込み系の QA エンジニアなので現場感覚はそれなりにあるつもりです。</p>

<p>で、早速なんだけど上記ブログから引用させてもらうと</p>

<blockquote><p>まぁ、なんにせよ、現在のウェブアプリ開発におけるテストなんて一歩間違えれば「ままごと」みたいなレベルだから、そんなに原理主義的になるのはダサいよねって話です。</p></blockquote>

<p><a href="http://d.hatena.ne.jp/kennejima/"><img width="16" alt="id:kennejima" src="http://www.hatena.ne.jp/users/kennejima/profile_s.gif" height="16" style="border: none; vertical-align: middle;margin-right: 4px; margin-left: 2px; margin-bottom: 2px;" />id:kennejima</a> に百パー同意で、ぶっちゃけちゃんと QA やった人間からすると境界値テストすらしてないしホワイトボックステストだらけなテストで品質管理とか何言ってんの状態。</p>

<p>で、じゃあテストってどうなのよって話になると思うので、俺が気をつけてることとか考えていることを書いていく。</p>

<p>俺は TDD が結構好きなので、基本はテスト書いてからコードを書く。
でも、これは品質管理のために書いてるんじゃ無くて実際にサーバ立ち上げて何回かクリックしたりして目で確認するのがめんどくさいとか、コンソールに表示された長い文字が正しいかどうか判断するのがめんどくさいから緑か赤で判別してるだけって感じ。</p>

<p><a href="http://d.hatena.ne.jp/t-wada/"><img width="16" alt="id:t-wada" src="http://www.hatena.ne.jp/users/t-wada/profile_s.gif" height="16" style="border: none; vertical-align: middle;margin-right: 4px; margin-left: 2px; margin-bottom: 2px;" />id:t-wada</a> がよく言っているデベロップメントテストってやつ（だと思う）</p>

<p>んで、ここから話がややこしくなってる原因だと思うんだけど、こういう開発を進めるためのテストで品質管理をしようとしはじめるんだよね。
で、それは別にそんなに悪い事じゃないんだけど本質的には違うものだと意識しておかないといけない。
意識しないで書くとデベロップメントテストで品質保証しようとして無駄に多いテスト書いて「テストが負債になってコード書きにくい」とか上記のブログにも書かれてる「地獄への道は善意で舗装されている」的な馬鹿なことが発生する。</p>

<p>でもこれ、考えるとすっげー当たり前の事なんだよね。
だって、 <strong>デベロップメントテストは開発者がアクセルを踏むためのテストで、品質管理のテストは開発者に適切にブレーキを踏ませるためのテスト</strong> なんだから。本質的には逆を向いてるんだよね。</p>

<p>それを意識しないから「とりあえずテスト書いておけば人に指摘されなくて済む的なチンケなプライド」とか、「昔テスト書かなかった自分への贖罪」とか、「チャンとテスト書いてる俺カッケー」とかのドロドロしたものが混じって負債に近いテストしか書かなくなっちゃうんじゃないかな。</p>

<p>でも、デベロップメントテストってその性質上、実装ベッタリになっちゃう事が多いと思うんだよね。だって開発を進めるために書いてるんだからなるべく小さくサイクルを回したいしそれはしょうがないと思うし、別に悪いことじゃ無いと思うんだよ。</p>

<p>ただ、それ、もしくはそれだけを品質管理の為のテストにしちゃうのがややこしくなってるんだよね。
でも、ぶっちゃけ Web 開発に置いては有る程度許容しちゃっていいと思うんだよ。それこそ組み込み系のような一度製品出しちゃったら回収騒ぎで数億円が一気にぶっとぶとかじゃない場合がほとんどだから（そういうのと比べれば）最低限に見える保証で出しちゃってエラーが出たら直せばいい。
同じ理屈で、課金系とか認証系の部分は開発者に適切にブレーキを踏ませるべきなのでテストを充実させておかなきゃいけない。</p>

<p>なので、それ以外の本当に大事なところ以外はデベロップメントテストを流用してある程度品質を担保しつつ、短いサイクルでリリースを繰り返して大きな障害を出さないようにするのがいいんじゃないかな？</p>

<p>で、テストを書くときは、 <strong>アクセルを踏むためのデベロップメントテスト</strong> なのか <strong>適切にブレーキを踏むための品質保証のためのテスト</strong> なのかを意識するだけでだいぶ違うんじゃないかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll/Octopress ではてな ID 記法的なの]]></title>
    <link href="http://yoshiori.github.io/blog/2014/01/04/hatena-id-syntax/"/>
    <updated>2014-01-04T16:13:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2014/01/04/hatena-id-syntax</id>
    <content type="html"><![CDATA[<p>なんとなく調べたらサクッと作れそうだったのと自分で使いたかったので <code>Jekyll/Octopress</code> で<code>はてな ID 記法</code>的なの書けるプラグイン書いた。</p>

<p><a href="https://github.com/yoshiori/jekyll_hatena_id_plugin">https://github.com/yoshiori/jekyll_hatena_id_plugin</a></p>

<h2>使い方</h2>

<p><a href="https://raw.github.com/yoshiori/jekyll_hatena_id_plugin/master/hatena_id.rb">hatena_id.rb</a> を <code>plugins</code> ディレクトリにコピーして、あとは ID リンクしたい場所で
<code>{% id Yoshiori %}</code> とか書けば行けます。</p>

<p><a href="http://d.hatena.ne.jp/Yoshiori/">id:Yoshiori</a></p>

<p>ついでに <code>detail</code> にも対応しておいたので <code>{% id Yoshiori detail %}</code> と書けば</p>

<p><a href="http://d.hatena.ne.jp/Yoshiori/"><img width="16" alt="id:Yoshiori" src="http://www.hatena.ne.jp/users/Yoshiori/profile_s.gif" height="16" style="border: none; vertical-align: middle;margin-right: 4px; margin-left: 2px; margin-bottom: 2px;" />id:Yoshiori</a></p>

<p>とアイコンも表示されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild.fm が一つの答えかもしれない]]></title>
    <link href="http://yoshiori.github.io/blog/2014/01/04/rebuild-dot-fm/"/>
    <updated>2014-01-04T13:43:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2014/01/04/rebuild-dot-fm</id>
    <content type="html"><![CDATA[<p>何年か前に<a href="http://d.hatena.ne.jp/nishiohirokazu/"><img width="16" alt="id:nishiohirokazu" src="http://www.hatena.ne.jp/users/nishiohirokazu/profile_s.gif" height="16" style="border: none; vertical-align: middle;margin-right: 4px; margin-left: 2px; margin-bottom: 2px;" />id:nishiohirokazu</a>と話している時、<code>Gemfile.lock</code> の仕組みが素晴らしいという話をしました。</p>

<p>で、その内容自体は今回はどうでもよくて、その時に「こういう違う言語の良い仕組みとかってやっぱり他の言語に広まりにくいよね」という話をしていました。（だから 「Smalltalk にオーパーツが！！」的な話がよくあったり）</p>

<p>なんでだろうって話している時に、例えばコレが友人との雑談でなく LL イベントとかで発表されていたら <code>Gemfile</code> って聞こえた途端に「あ、Ruby の話だな」って思って別の作業しちゃったり、あんまりちゃんと聞かなかったりしちゃうよねと（LL 実行委員会の方々ごめんなさい＞＜）</p>

<p>多分、ブログとかに書かれてても同じように「あ、違う言語の話だな」って思って読み飛ばしたりしちゃうんだろうなぁと。</p>

<p>で、そんなことずーっと忘れてたんだけど、この前 <a href="http://rebuild.fm/">Rebuild.fm</a> 聞いている時にふと「あ、これが一つの答えなのでは？」と思った。</p>

<ul>
<li>適度な更新間隔で</li>
<li>信頼しているエンジニアが</li>
<li>その時に興味ある技術を適当に</li>
<li>設計思想とかも含めて話す</li>
</ul>


<p>これって本当にエンジニアの雑談に近いなぁと思った。</p>

<p>ということで、最近は通勤中に聞く <a href="http://rebuild.fm/">Rebuild.fm</a> が楽しみです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BOOKSCANプレミアム会員の 1/3 の値段で快適生活]]></title>
    <link href="http://yoshiori.github.io/blog/2014/01/02/bookscan/"/>
    <updated>2014-01-02T23:17:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2014/01/02/bookscan</id>
    <content type="html"><![CDATA[<p>完全に煽り気味なタイトルだけど、毎回色々な人に <a href="http://www.bookscan.co.jp/">BOOKSCAN</a> のススメを話すときに</p>

<blockquote><p>「スゲーいいじゃん！！ でも高くない？」</p>

<p>「そういうと思って実はな……」</p></blockquote>

<p>的な話をするのも飽きてきたのでまとめる。</p>

<p>ざっくりとだけ纏めるので、詳しい内容については <a href="http://www.bookscan.co.jp/">BOOKSCAN</a> のサイトにて見てください。</p>

<h2>BOOKSCAN のプレミアム会員で出来る事</h2>

<p>ざっくり言うと</p>

<p><strong>Kindle 化されていない本も Amazon で購入したら三日後くらいに Kindle に届く。ついでに Dropbox にもアップしておいてくれる</strong></p>

<p>とかそんなことが出来る。
しかも、PDF はずっと保存しておいてくれるので書籍のクラウド管理的な事も出来ちゃう。</p>

<h2>もう少し詳しく</h2>

<p>さっきのをもう少し詳しく説明しておくと……</p>

<h3>Kindle 化されていない本も Amazon で購入したら……</h3>

<p>プレミアムサービスに登録すると自分専用の住所が貰える。そこに送られた本は自動でスキャンされるので、Amazon の送付先をその住所にしておけば、実物の本を一度も見ることなく、PDF になる。</p>

<p>ふと思ったんだけど、これ、住所東京だし、ヘタすれば離島の人とか海外の人とか送料とか届くまでの時間の短縮にもなるのでは！？</p>

<h3>Kindle に届く</h3>

<p>オートチューニング設定というのがあって、スキャン後に自動で処理させるものを選択できる。なので、 Kindle で読みやすいように加工して……
<img src="https://www.evernote.com/shard/s4/sh/8ffd5a1d-7037-4c5d-9b1c-429a44c9ba35/9aef3e7e3b90eff3b381cc840d4cb175/deep/0/BOOKSCAN(%E3%83%96%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3)-%E8%94%B5%E6%9B%B8%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E5%8C%96%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9---%E8%87%AA%E5%8B%95%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0.png" alt="" /></p>

<p>Kindle に送るようにしておけば良い
<img src="https://www.evernote.com/shard/s4/sh/8c02587c-cb46-4aef-87e2-a57ca1085e28/79182ca7c90b46ac1150e1c5ebac4493/deep/0/BOOKSCAN(%E3%83%96%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3)-%E8%94%B5%E6%9B%B8%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E5%8C%96%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9---%E8%87%AA%E5%8B%95%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0.png" alt="" /></p>

<p>これだけでスキャンが終わったら自動で送ってくれる。</p>

<h3>ついでに Dropbox にもアップしておいてくれる</h3>

<p>同じくコレもオートチューニング設定しておけばいいだけ
<img src="https://www.evernote.com/shard/s4/sh/d2774b3f-f136-4628-b31c-bf178dbca742/97dd405ef208d843bc444147bad6f1da/deep/0/BOOKSCAN(%E3%83%96%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3)-%E8%94%B5%E6%9B%B8%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E5%8C%96%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9---%E8%87%AA%E5%8B%95%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0.png" alt=""/></p>

<h3>書籍のクラウド管理的な事も出来ちゃう</h3>

<p>スキャンした PDF はサーバで管理してくれていて、しかもいつでも上記みたいなチューニング依頼も出せる。
<img src="https://www.evernote.com/shard/s4/sh/4ced0abd-5455-4130-b55a-4b91a99b98aa/476c285afc999c3ecd8260109d758c53/deep/0/BOOKSCAN(%E3%83%96%E3%83%83%E3%82%AF%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3)-%E8%94%B5%E6%9B%B8%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E5%8C%96%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9---%E3%83%9E%E3%82%A4%E6%9C%AC%E6%A3%9A.png" alt="" /></p>

<h2>肝心の「でも、お高いんでしょ？」問題</h2>

<p>で、こんな便利な <a href="http://www.bookscan.co.jp/">BOOKSCAN</a> のプレミアム会員、月額 9800円！！ 50冊まで無料！！いや、やっぱり高い……
価値が有るのはわかるけど高い……</p>

<p>なので、解約しちゃいましょう！！
すると……解約完了メールの中にさらっと……</p>

<blockquote><p>■プレミアム会員ライトのご案内</p>

<p>毎月50冊もスキャンするものがないが、低額でプレミアム会員を継続したい
という皆様のご要望にお応えし、過去プレミアム会員でいらっしゃった
ユーザー様限定で、プレミアム会員ライトをご用意いたしました。</p></blockquote>

<p><strong>ｷﾀ━━━━(ﾟ∀ﾟ)━━━━!!</strong></p>

<p>これこれこれです。</p>

<p>細かくはもう少し違いがあるけど、ほぼ月の無料冊数が 10 冊になったプレミアム会員です。上記に書いたようなものはすべて利用できて<code>2980円/月</code>です
つまり、僕のおすすめの使い方は</p>

<ol>
<li>プレミアム会員になる</li>
<li>家などにある技術書がなくなるまで、毎月送りつける（50冊まで無料）</li>
<li>すべて送りきったらプレミアム会員解約する</li>
<li>そのままプレミアム会員ライトに申し込む（解約後一ヶ月以内とかだったっハズ）</li>
</ol>


<p>と、いう感じでしておくと技術書の場所問題も解決するし、電子化されてない技術書、持ち歩くの面倒くさい！！ とかも解決するし凄い良いと思います。</p>

<p>p.s.
僕は技術書、ビジネス書で利用してるので漫画の場合の使い勝手などはわかりませんが、漫画は<a href="http://seiga.nicovideo.jp/book/">ニコ書</a>で読めばいいのではないでしょうか？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BabyFace という gem を作りました]]></title>
    <link href="http://yoshiori.github.io/blog/2013/12/09/babyface-gem/"/>
    <updated>2013-12-09T00:00:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/12/09/babyface-gem</id>
    <content type="html"><![CDATA[<p>「<a href="http://ja.wikipedia.org/wiki/%E5%8D%98%E7%B4%94%E3%83%99%E3%82%A4%E3%82%BA%E5%88%86%E9%A1%9E%E5%99%A8">単純ベイズ分類器</a>」を簡単に組み込める gem を作ってみました！！</p>

<h1>BabyFace</h1>

<p><a href="https://github.com/yoshiori/baby_face">https://github.com/yoshiori/baby_face</a></p>

<h2>簡単な使い方</h2>

<p>判定したいクラスで BabyFace を include してちょっと設定書くだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Entry</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BabyFace</span>
</span><span class='line'>  <span class="n">baby_face_for</span> <span class="ss">features</span><span class="p">:</span> <span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">categories</span><span class="p">:</span> <span class="o">[</span><span class="ss">:ham</span><span class="p">,</span> <span class="ss">:spam</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな形で指定します</p>

<ul>
<li>features

<ul>
<li>学習対象にする値</li>
</ul>
</li>
<li>categories

<ul>
<li>カテゴリ分け</li>
</ul>
</li>
</ul>


<p>が最小の設定になります。
これだけで、<code>Entry</code> のインスタンスに <code>baby_face</code> というのが生えます。
で、<code>categories</code> を元に学習用と判定用のメソッドが生えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">entry1</span><span class="o">.</span><span class="n">baby_face</span><span class="o">.</span><span class="n">train_ham</span> <span class="c1"># ham を学習</span>
</span><span class='line'><span class="n">entry2</span><span class="o">.</span><span class="n">baby_face</span><span class="o">.</span><span class="n">train_spam</span> <span class="c1"># spam を学習</span>
</span><span class='line'>
</span><span class='line'><span class="n">entry3</span><span class="o">.</span><span class="n">baby_face</span><span class="o">.</span><span class="n">ham?</span> <span class="c1"># ham かどうか判定</span>
</span><span class='line'><span class="n">entry3</span><span class="o">.</span><span class="n">baby_face</span><span class="o">.</span><span class="n">spam?</span> <span class="c1"># spam かどうか判定</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで特に難しいこと考えないで使えます。</p>

<h2>もうちょっとカスタマイズ</h2>

<h3>学習データの保存</h3>

<p>学習データはそのままだとメモリ上にあり保存されないので保存できるようにしてあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">BabyFace</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">data_dir</span> <span class="o">=</span> <span class="s2">&quot;/tmp/baby_face&quot;</span>
</span><span class='line'><span class="n">entry</span><span class="o">.</span><span class="n">baby_face</span><span class="o">.</span><span class="n">save</span> <span class="c1"># =&gt; /tmp/baby_face/entry.babyface</span>
</span></code></pre></td></tr></table></div></figure>


<h3>文字列の分解方法</h3>

<p>デフォルトでは <code>String#split</code> していますが、カスタマイズできます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;mecab&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;baby_face&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">wakachi</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@wakachi</span> <span class="o">||=</span> <span class="ss">MeCab</span><span class="p">:</span><span class="ss">:Tagger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;-O wakati&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@wakachi</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">split</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Entry</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BabyFace</span>
</span><span class='line'>  <span class="n">baby_face_for</span> <span class="ss">features</span><span class="p">:</span> <span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">categories</span><span class="p">:</span> <span class="o">[</span><span class="ss">:light_side</span><span class="p">,</span> <span class="ss">:dark_side</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">tokenizer</span><span class="p">:</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span> <span class="n">wakachi</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいな感じで渡せます。
MeCab とか使って日本語を分かち書きする処理などを渡したり出来ます。</p>

<h3>ネストしたオブジェクト</h3>

<p>ActiveRecord の関連みたいなのも学習対象にすることが出来ます。
関連先でも <code>include</code> して <code>features</code> だけ書いていたらそれも使われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Entry</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BabyFace</span>
</span><span class='line'>  <span class="n">baby_face_for</span> <span class="ss">features</span><span class="p">:</span> <span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:comments</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">categories</span><span class="p">:</span> <span class="o">[</span><span class="ss">:ham</span><span class="p">,</span> <span class="ss">:spam</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BabyFace</span>
</span><span class='line'>  <span class="n">baby_face_for</span> <span class="ss">features</span><span class="p">:</span> <span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:message</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>学習データ詳細</h3>

<p>BabyFace はフィールドごとに単語を別扱いしています。
なので、上記の例で言えば <code>title</code> に入っている「殺す」と <code>body</code> に入っている「殺す」は別扱いしています。</p>

<h1>まとめ</h1>

<p>機械学習とかその辺のことは全然分かってないのですが、覚えるためにとりあえず自分で触ってみました。
さくっと組み込めるので投稿系のサービス作ってみるときとかに気軽に導入したり出来ると思います。
あと、自分のブログとはてブ数とか学習させて今から投稿する記事がはてブ稼げるかどうかとか見てみるのも楽しいかも。</p>

<p>まだ作ったばかりで色々足りないと思いますが、使ってみてください＞＜</p>

<p><a href="https://rubygems.org/gems/baby_face">https://rubygems.org/gems/baby_face</a></p>

<h1>そして名前の由来</h1>

<p>突然だけどスタンド使いとプログラマは似ていると思う。
自分から生み出したものが動作し世の中に影響を与える……
スタンドとはプログラムのことかもしれない。
そしてそんなプログラムを書ける人間はスタンド使いなのかもしれない。</p>

<p>だからプログラマ同士は惹かれ合うのかもしれない……</p>

<p>僕の大好きな第五部に「ベイビィ・フェイス」というちょっと変わったスタンドが出てきます。</p>

<blockquote><p>追跡するターゲットの遺伝子情報をノートパソコン型のスタンドへ入力、それを母体となる女性に受胎させることで、遠隔パワー型のスタンドを生み出す能力。</p></blockquote>

<p>という能力。</p>

<p>さらに作品中ではドンドン色々なことを学習させていくという感じです。</p>

<p><img src="https://github-camo.global.ssl.fastly.net/c2c5476da60f6af5321c1258c118c031c0b210a8/687474703a2f2f6661726d332e737461746963666c69636b722e636f6d2f323833352f31313137323639363539335f326539386439383164305f6f2e6a7067" alt="" /></p>

<p>コレって完全に教師あり学習だなぁと思ってたので今回の gem にこの名前をつけました。</p>

<p>実は人生初の ruby-gem です。</p>

<p>そして調べてたら「<a href="http://dic.nicovideo.jp/a/%E3%83%87%E3%82%A3%E3%83%BB%E3%83%A2%E3%83%BC%E3%83%AB%E3%83%88">しかし、このディ・モールトの使い方はイタリア語としてはディ・モールト間違っている。</a>」とかでてきてちょっとショックでしたが僕は元気です。</p>

<p>と、いうわけで実は「<a href="http://www.adventar.org/calendars/122">ジョジョの奇妙な冒険 Advent Calendar 2013</a>」の参加エントリでした。</p>

<blockquote><p>やっぱりプログラマなんだからプログラムで語らないとね!!</p></blockquote>

<p>と言うとかっこいいけど、実は普通に便乗して自分の gem の宣伝しただけですねｗｗ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小学生でもわかる計算だけで 0.9999…… が 1 な事を説明]]></title>
    <link href="http://yoshiori.github.io/blog/2013/10/11/0-dot-999999-equals-1/"/>
    <updated>2013-10-11T21:29:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/10/11/0-dot-999999-equals-1</id>
    <content type="html"><![CDATA[<p>最近、学のない僕は定期的に会社で <a href="https://twitter.com/mrkn">@mrkn</a> と <a href="https://twitter.com/conceal_rs/">@conceal_rs</a> に数学を教わっています。</p>

<p>今日も教わっていたんだけどそこで、小学生で習ったことくらいしか使わないで <script type="math/tex"> 0.9999\ldots </script> が <script type="math/tex"> 1 </script> なことを証明できちゃったことに感動した。</p>

<h2>ということで説明</h2>

<p>最初の第一歩で小数点の循環して続いているところだけとりだす</p>

<script type="math/tex; mode=display">
  0.9999\ldots - 0.0999\ldots = 0.9
</script>


<p>で、次に <script type="math/tex"> 0.9999\ldots </script> を <script type="math/tex"> x </script>  に置き換えると</p>

<script type="math/tex; mode=display">
  x - x \div 10 = 0.9\\
  \Downarrow\\
  x - \frac{x}{10} = 0.9\\
  \Downarrow\\
  10x - x = 9\\
  \Downarrow\\
  9x = 9\\
  \Downarrow\\
  x = \frac{9}{9}\\
  \Downarrow\\
  x = 1\\
</script>


<p>で、さっき <script type="math/tex"> 0.9999\ldots </script> を <script type="math/tex"> x </script> にしたので戻すと</p>

<script type="math/tex; mode=display">
  0.9999\ldots = 1\\
</script>


<p>出来た！！！</p>

<p>すごいね！！</p>

<p>あと、<code>MathJax</code> というか <code>LaTeX</code> 難しい＞＜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「コーディングを支える技術」読み終わってました]]></title>
    <link href="http://yoshiori.github.io/blog/2013/08/10/langbook/"/>
    <updated>2013-08-10T00:41:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/08/10/langbook</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=F8F8F8&IS2=1&bg1=F8F8F8&fc1=000000&lc1=0000FF&t=yoshiori-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=477415654X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>メール読み返したら</p>

<blockquote><p>「本送るから今の住所教えて！！」</p></blockquote>

<p>って言われた時に</p>

<blockquote><p>「書評書くの遅れて 5 月くらいになっちゃうよ」</p></blockquote>

<p>って答えてました。
<strong>時の流れって怖いですね！！</strong>
ヨシオリです。</p>

<p>本当にごめん＞＜</p>

<p>実は RailsConf の帰りの飛行機の中で読み終わってたんだけど、感想書くの延び延びになっちゃってた＞＜</p>

<h2>で、感想</h2>

<p>西尾さんの前に書いた<a href="http://www.amazon.co.jp/gp/product/4839922829/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4839922829&linkCode=as2&tag=yoshiori-22">Jythonプログラミング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=yoshiori-22&l=as2&o=9&a=4839922829" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />の時に</p>

<blockquote><p>クラス使わないでクラス的なことを表現するのが一番面白かった。
そっち系のもっと読みたいなぁ</p></blockquote>

<p>って思ってたんだけど、まさにそんな本がでて凄く楽しく読みました。</p>

<p>プログラミングとか新しいことを勉強しようとしたら
「<strong>なんでそうなっているのか思想を学ぶ</strong>」
のが良いと思うんだけど、その<strong>思想</strong>が生まれた<strong>歴史</strong>まで学べたら更に良いよねって事でそんなのがいっぱい詰まっている本です。</p>

<p>例えば<em>第 3 章</em>で<strong>文法の誕生</strong>から始まって、<em>第 4 章</em>で<code>if</code>文を<code>GOTO</code>で表すところから始まり、<code>while</code>、<code>for</code> への説明へ続いていきます。</p>

<p>その後もそんな感じで全開で成り立ちから学んでいきます。
だってまさか「型」の説明の導入が「ランプのオンオフで数字を表してみよう」から始まるとは普通思わないよね！！
そこから固定小数点、浮動小数点の話に入っていって……みたいな感じで</p>

<p>他にもエラー処理の仕組みとか動的スコープと静的スコープの話とか並行処理の話とか……
なんというかプログラムやってる人がハマったり難しいと感じがちな部分が成り立ちから丁寧に説明されてて</p>

<blockquote><p>あぁ、俺がプログラミングやりはじてた頃にこの本があったらどんだけ良かったか……</p></blockquote>

<p>って思いながら読みました。</p>

<p>どれかのプログラミング言語に依存してたりしないでプログラミング言語について学べるので
プログラマはみんな読むと良いと思うよ！！</p>

<p>p.s.
そしてこういう話を飲みながらダラダラと話すのが一番面白かったりするので是非誘って下しあ＞＜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsConf 2013 で LT してきました！！]]></title>
    <link href="http://yoshiori.github.io/blog/2013/05/01/presentation-in-railsconf-2013/"/>
    <updated>2013-05-01T19:19:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/05/01/presentation-in-railsconf-2013</id>
    <content type="html"><![CDATA[<p>RailsConf 2013 がポートランドで開催されたので行って来ました！！
初の海外カンファレンス参加です！！</p>

<p>英語とか全然出来ないので必死に勉強していったのですが、やはり付け焼刃ではなかなか難しかったです＞＜</p>

<p>で、まぁ、出来ないからといって挑戦しないことには何も成長しないので LT に応募して発表して来ました。</p>

<object type="application/x-shockwave-flash" height="300" width="400" id="clip_embed_player_flash" data="http://www-cdn.justin.tv/widgets/archive_embed_player.swf" bgcolor="#000000"><param name="movie" value="http://www-cdn.justin.tv/widgets/archive_embed_player.swf" /><param name="allowScriptAccess" value="always" /><param name="allowNetworking" value="all" /><param name="allowFullScreen" value="true" /><param name="flashvars" value="auto_play=false&start_volume=25&title=Title&channel=confreaks&chapter_id=2250576" /></object>


<br /><a href="http://www.justin.tv/confreaks#r=-rid-&amp;s=em" class="trk" style="padding: 2px 0px 4px; display: block; width: 320px; font-weight: normal; font-size: 10px; text-decoration: underline; text-align: center;">Watch live video from Confreaks - Live Streaming on Justin.tv</a>


<p>マジ今聞き直しても背中の汗が止まらない酷い英語ですね＞＜</p>

<p>でも、皆さん優しくて終わった後、暖かい声を頂きました</p>

<blockquote><p>@yoshiori amazing talk :) #railsconf</p><footer><strong>@senthilnayagam</strong> <cite><a href='https://twitter.com/senthilnayagam/status/329768448601239554'>twitter.com/senthilnayagam/&hellip;</a></cite></footer></blockquote>




<blockquote><p>Ladies and gentlemen, @yoshiori is a bad ass developer. That last lightening talk was killer. #railsconf</p><footer><strong>@davidcmolina</strong> <cite><a href='https://twitter.com/davidcmolina/status/329768905306406912'>twitter.com/davidcmolina/status/&hellip;</a></cite></footer></blockquote>




<blockquote><p>Hillarious! Well done! Love the dialog style presentation! @yoshiori #railsconf  // Thanks for the correction, @tmaesaka!</p><footer><strong>@crueber</strong> <cite><a href='https://twitter.com/crueber/status/329769643977871360'>twitter.com/crueber/status/&hellip;</a></cite></footer></blockquote>




<blockquote><p>@yoshiori @a_matsuda hey rubygems-mirror-command looks great. @raggi and @markimbriaco had a way to download the all the gems in a few mins!</p><footer><strong>@qrush</strong> <cite><a href='https://twitter.com/qrush/status/329770309089644544'>twitter.com/qrush/status/&hellip;</a></cite></footer></blockquote>




<blockquote><p>@yoshiori Your lightning talk was awesome. How did you make the slides?</p><footer><strong>@ckrailo</strong> <cite><a href='https://twitter.com/ckrailo/status/330031270493032448'>twitter.com/ckrailo/status/&hellip;</a></cite></footer></blockquote>


<p>とりあえず資料公開しておきます。</p>

<script async class="speakerdeck-embed" data-id="d1c1311094f80130298d2efa0068aa13" data-ratio="1.2896725440806" src="http://yoshiori.github.io//speakerdeck.com/assets/embed.js"></script>


<p>英語の文章を書くときに色々相談に乗ってくれた</p>

<p><a href="https://twitter.com/mrkn">@mrkn</a>,<a href="https://twitter.com/tmaesaka">@tmaesaka</a>,<a href="https://twitter.com/adorechic">@adorechic</a>,<a href="https://twitter.com/r7kamura">@r7kamura</a> 本当にありがとう！！</p>

<p>そして丁度 RailsConf に参加している期間で試用期間が終わり COOKPAD の正式な一員になりました。
試用期間にもかかわらず RailsConf に参加させていただいた会社にも大感謝です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chanko の active_if で none を使えるようにしました]]></title>
    <link href="http://yoshiori.github.io/blog/2013/04/22/add-support-none-to-chankos-active-if/"/>
    <updated>2013-04-22T23:21:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/04/22/add-support-none-to-chankos-active-if</id>
    <content type="html"><![CDATA[<p><code>Chanko</code> の <code>active_if</code> は今まで <code>all</code>, <code>any</code> 相当の機能しかなかったのですが、<code>none</code> の機能を追加しました。
（コード的にはいつでも <code>one?</code> 相当の機能も実装できるのですが、必要性を感じなかったので……）</p>

<p><a href="https://github.com/cookpad/chanko/pull/31">Add Support &#39;none&#39; to active_if by yoshiori · Pull Request #31 · cookpad/chanko</a></p>

<p>これにより例えば特定のデバイスに向けた機能と特定のデバイスを弾きたい機能があった場合に今までは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveIf</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">:device_hoge?</span><span class="p">)</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'><span class="no">ActiveIf</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">:not_device_hoge?</span><span class="p">)</span> <span class="p">{</span> <span class="o">!.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と別々に定義しておいて</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">active_if</span> <span class="ss">:all_staffs?</span><span class="p">,</span> <span class="ss">:device_hoge?</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">active_if</span> <span class="ss">:all_staffs?</span><span class="p">,</span> <span class="ss">:not_device_hoge?</span>
</span></code></pre></td></tr></table></div></figure>


<p>それぞれ書いていました。
（<code>active_if</code> はデフォルトは <code>all</code> になります）</p>

<p>これを <code>none</code> を使うと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveIf</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">:device_hoge?</span><span class="p">)</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と定義しておいて</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">active_if</span> <span class="ss">:all_staffs?</span><span class="p">,</span> <span class="ss">:device_hoge?</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">active_if</span> <span class="ss">:all_staffs?</span><span class="p">,</span> <span class="n">none</span><span class="p">(</span><span class="ss">:device_hoge?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くことが出来るようになりました。</p>

<p>また、入れ子もサポートしていますので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">active_if</span> <span class="ss">:all_staffs?</span><span class="p">,</span> <span class="n">any</span><span class="p">(</span><span class="n">none</span><span class="p">(</span><span class="ss">:device_hoge?</span><span class="p">),</span> <span class="n">none</span><span class="p">(</span><span class="ss">:device_bar?</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>のような事も書けます。</p>

<p>ちなみにこの機能を書くときに似た処理である <code>any</code> と <code>none</code> を統合した結果、<code>any</code> も入れ子をサポートするようになったので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">active_if</span> <span class="n">any</span><span class="p">(</span><span class="n">any</span><span class="p">(</span><span class="n">any</span><span class="p">(</span><span class="n">none</span><span class="p">(</span><span class="ss">:false</span><span class="p">,</span> <span class="ss">:false</span><span class="p">),</span> <span class="ss">:false</span><span class="p">),</span> <span class="ss">:false</span><span class="p">),</span> <span class="ss">:false</span><span class="p">)</span>
</span><span class='line'><span class="c1"># true</span>
</span></code></pre></td></tr></table></div></figure>


<p>というようなモノもサポートするようになりました。</p>

<p>（実際にやるのは推奨しませんがｗｗｗ）</p>

<p>ということで、自分のコードが取り込まれたのが嬉しくて久しぶりにブログを書いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[デブサミ 2013 で自分戦略について発表して来ました]]></title>
    <link href="http://yoshiori.github.io/blog/2013/02/17/devsum-2013/"/>
    <updated>2013-02-17T20:22:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/02/17/devsum-2013</id>
    <content type="html"><![CDATA[<p>今年も（！？）ギリギリオファーがありデブサミで発表して来ました。</p>

<script async class="speakerdeck-embed" data-id="4c4519c059860130d1bf1231392d87a1" data-ratio="1.2896725440806" src="http://yoshiori.github.io//speakerdeck.com/assets/embed.js"></script>


<p>なんというか高卒 &amp;&amp; 25 歳からプログラマになったという二重苦みたいな環境なので
大卒の人とかもっと若い頃からプログラム書いてた人は僕よりは楽に進めると思いますが、最低限こんなもんだよねって言うのを見てもらえればいいと思います。</p>

<h2>口頭で説明した部分をざっくり書くと</h2>

<ol>
<li>25歳からプログラマになった</li>
<li>組み込み系、SI を経て web系へ転職</li>
<li>プログラマからプレイングマネージャになった</li>
<li><p>自分戦略として考える軸として、</p>

<ul>
<li>お金（自分の市場価値）</li>
<li>純粋に好奇心から自分のスキルを上げたい</li>
</ul>


<p>の 2 つを考えると考えやすいと思います。</p></li>
<li><p>（僕の戦略として）目指すところは最強</p></li>
<li>ドラクエで言うとお金貯めるよりステータス上げたい</li>
<li>リーダーとしてそれなりにやれることは確認できた</li>
<li>次のステップとしてはやはり自分の根っこはエンジニアなのでエンジニアとしてまたガッツリ LV を上げたい</li>
<li>Java で一番の下手くそになれる会社は日本にはあんまりなさそうだなぁ</li>
<li>言語も文化も変えたい(Java での伸び代よりも他の言語をガッツリやったほうが伸び代が有る)</li>
<li>自分が尊敬できるエンジニアが一番集まっていて、かつ自分が一番の下手くそになれる会社を探した</li>
<li>実際にコード書くとこんなにツッコミが！！！</li>
<li>というわけで、ガッツリレベル上げたい人！！ <a href="https://www.wantedly.com/projects/2">一緒に働きましょう！！</a></li>
</ol>


<p>という感じです。</p>

<h2>ついでに言っておくと</h2>

<p>なんかブームみたいになっていたせいか「退職ブログは書かないの？」と聞かれるんだけど、
俺は別れた女について聞かれても「俺にはもったいないくらい、いい女だったよ」以外の答えを持ってねーよ！！</p>

<p>もうちょっと言うと、退職ブログを書く人を別に否定はしないけど、俺としては公に書けるようなことは何もないし
上っ面のこと適当にでっち上げて書けるほど器用じゃないよって事です。</p>

<p>どうしても知りたかったら焼肉でもおごってください。
そこまで知りたい人には話しますよっと。</p>

<h2>というわけで COOKPAD で働いています</h2>

<p>いちエンジニアとして初めての言語、初めてのフレームワークという環境でガッツリ頑張っています！！
マジで楽しいので是非一緒に働きましょう！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「SQL アンチパターン」は色んな戦争の火種になりそう]]></title>
    <link href="http://yoshiori.github.io/blog/2013/02/10/sql-antipatterns/"/>
    <updated>2013-02-10T22:29:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/02/10/sql-antipatterns</id>
    <content type="html"><![CDATA[<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=yoshiori-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873115892" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>監訳の一人である @t_wada に献本頂きました。
ありがとうございます！！！</p>

<p>でだ、いきなりだけどコレ、タイトルで損してると思うんだよね……</p>

<p>だって、<code>SQL</code> のアンチパターンてタイトルだったら、</p>

<blockquote><p><code>join</code> した結果の方で <code>where</code> で絞るよりも <code>on</code> 句で先に絞れ</p></blockquote>

<p>的なのが書いてあると思うじゃん！！
問い合わせ言語の事だと思うじゃん！！！</p>

<p><strong>違った……</strong></p>

<p>ほとんど書いてあるのは DB 設計についてだった……
まぁ、副題は「Avoiding the Pitfalls of Database Programming」のだし、まぁいいか。</p>

<h1>んで、読んでみた感想とか</h1>

<p>もうね、何年か DB 絡んだ開発したことのある人なら（・∀・）ﾆﾔﾆﾔ出来ると思う。</p>

<blockquote><p>「&#8221;マルチカラムアトリビュート&#8221;とか 10 年前に通ったわー」</p></blockquote>

<p>とか</p>

<blockquote><p>「あーはいはい&#8221;インデックスショットガン&#8221;乙」</p></blockquote>

<p>みたいな。</p>

<blockquote><p>Explain の結果も見ないでインデックス貼りまくる奴いるよねーーー</p></blockquote>

<p>とか、ドンドン盛り上がれそう。</p>

<p>実際俺も&#8221;EAV（エンティティ・アトリビュート・バリュー）&#8221; はホントつい最近もやろうと思った。
(結局複雑になりすぎるからやめたけど)</p>

<h2>個人的に反対なアンチパターン</h2>

<h3>ファントムファイル</h3>

<p>ファントムファイルの解決策については実際に 2 度やったことがある。
データの規模も、ユーザーの想定数もぜんぜん違う 2 つのアプリで……
でもそのファイルへのアクセス方法とか逆に複雑になるだけで何も得しなかった。
よく考えればファイルシステムそのものがファイルを扱うことに特化した KVS 的なものなんだからそっち使ったほうが良いというのが俺のプラクティスだなぁ</p>

<h2>反対では無いけどあんまり賛同しないアンチパターン</h2>

<h3>キーレスエントリ</h3>

<p>外部キー制約で、</p>

<blockquote><p>オーバーヘッド、……にはなりません</p></blockquote>

<p>って書いてあるんだけど、いやなるでしょ……
どの程度の更新頻度を見ているのかわからないけど、ソーシャルゲーム系とか外部キー制約とか貼ってたら無理な気がするんだけどどうなんだろう？</p>

<p>ここは本当にこの文章を鵜呑みにしないで、設計時にちゃんと想定ユーザー数で負荷テストやらないと怖いことになりそう……</p>

<h1>で、この本の本当に凄いところはパターンに名前を付けたこと</h1>

<p>さて、ここまで読んでもらえばわかると思うんだけど、この本の本当に凄いところは <strong>パターンに名前を付けたこと</strong> だと思う。</p>

<p>俺が書いたみたいに例えば「ファントムファイルは俺は反対だな」的な事が簡潔に言えるようなことになったのは本当に素晴らしいと思う。
今までだったら「ファイルをさ、DB にデータとしていれるパターンあるじゃん！！いや、パスじゃなくてデータ自体をだよ！！ ほら、入れておくとカラムのデータとの整合性を保つのが楽だとか……
」とかそんな説明をしてからじゃあ無いと議論が始められなかったのがサクッと始められるようになった。</p>

<p>というわけで、タイトルに書いたとおり戦争の火種になってくれそうな本だなぁと。
逆に今までは何度か DB 設計したことないとこういう議論が出来なかったのが本にまとまってくれたのでこれで誰でも議論に参加できるね！！！</p>

<h3>p.s.</h3>

<p>付録の 第 4 正規形とかの例が凄く良かったです！！（個人的に不得手な所だったので）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【解決済み】FactoryGirl の relation の定義の仕方がよくわからない＞＜]]></title>
    <link href="http://yoshiori.github.io/blog/2013/02/03/factory-girl-relation/"/>
    <updated>2013-02-03T22:09:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/02/03/factory-girl-relation</id>
    <content type="html"><![CDATA[<p>FactoryGirl で relation 定義したいんだけど、具体的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tasks</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな 2 つのモデルで</p>

<figure class='code'><figcaption><span>users.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">tasks</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>       <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span> <span class="p">,</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>tasks.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:task</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいな定義をしておくと……</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="no">Unable</span> <span class="n">to</span> <span class="n">find</span> <span class="n">matching</span> <span class="n">line</span> <span class="n">from</span> <span class="n">backtrace</span>
</span><span class='line'> <span class="ss">SystemStackError</span><span class="p">:</span>
</span><span class='line'>     <span class="n">stack</span> <span class="n">level</span> <span class="n">too</span> <span class="n">deep</span>
</span></code></pre></td></tr></table></div></figure>


<p>まぁ、メッセージの通り循環参照になっちゃうからダメなのは分かる。</p>

<p>でも、<code>:user</code> の宣言から <code>tasks</code> 外すと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">.</span><span class="n">tasks</span>
</span></code></pre></td></tr></table></div></figure>


<p>で何も返ってこないし、逆に <code>:task</code> の方で <code>user</code> 外すと
今度は <code>presence</code> のバリデーションに引っかかっちゃう</p>

<p>絶対書き方間違えてるせいなんだけど、どうやったらいいのかわからない＞＜
教えてエロイ人！！！！</p>

<p>追記</p>

<blockquote><p>@yoshiori こんな感じでどうでしょうか https://t.co/ScRDRvLK</p><footer><strong>@naoty_k</strong> <cite><a href='https://twitter.com/naoty_k/status/298061407499468801'>twitter.com/naoty_k/status/&hellip;</a></cite></footer></blockquote>


<div><script src='https://gist.github.com/4701800.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>と教えてもらいました</p>

<blockquote><p>@yoshiori すいません、さっきのは循環しそうなので、修正しました。 https://t.co/ScRDRvLK</p><footer><strong>@naoty_k</strong> <cite><a href='https://twitter.com/naoty_k/status/298062728004788224'>twitter.com/naoty_k/status/&hellip;</a></cite></footer></blockquote>


<p>とのことでしたが僕の手元では <code>trait</code> 使わなくても行けました！！！
ありがとうございます！！！</p>

<p>他にも</p>

<blockquote><p>@yoshiori こうでどうだろうか http://t.co/Sf1oc9OV</p><footer><strong>@rosylilly</strong> <cite><a href='https://twitter.com/rosylilly/status/298062237988442114'>twitter.com/rosylilly/status/&hellip;</a></cite></footer></blockquote>




<blockquote><p>@yoshiori userの定義に、after :create do … end でtasksを追加するとよさそうー</p><footer><strong>@tomoya55</strong> <cite><a href='https://twitter.com/tomoya55/status/298064513360605184'>twitter.com/tomoya55/status/&hellip;</a></cite></footer></blockquote>


<p>といろいろな方が教えてくれました！！！
ありがとうございます！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git で branch 切り替えた時とかに emacs で開いてるファイルの buffer を更新]]></title>
    <link href="http://yoshiori.github.io/blog/2013/01/31/file-update-emacs/"/>
    <updated>2013-01-31T16:14:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/01/31/file-update-emacs</id>
    <content type="html"><![CDATA[<p>Git で作業してると branch 切り替えたり stash したり色々と emacs の buffer で開いてるファイルが裏で更新されることが増えた。
で、気づかずにセーブしようとして確認でて上書きすると裏であった変更消しちゃうし開き直すと今書いたの消えちゃうしとか……</p>

<p>なんかそういう設定有るはずだよなぁとか思いながら見つけられてなかったんだけど、やっと見つけた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; 変更のあったファイルの自動再読み込み</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-auto-revert-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで安心！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord::Relation#pluck 使うときは Array が返ってくるの忘れちゃいけない]]></title>
    <link href="http://yoshiori.github.io/blog/2013/01/30/use-pluck-uniq/"/>
    <updated>2013-01-30T20:38:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/01/30/use-pluck-uniq</id>
    <content type="html"><![CDATA[<p>元々こんなコードがあった</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s2">&quot;test&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、title しか使ってないんだからいちいち ActiveRecode のオブジェクト作って取り出すより pluck 使うように修正した</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s2">&quot;test&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span>
</span></code></pre></td></tr></table></div></figure>


<p>そう、俺はここで満足してしまった……で、pull request 出した結果突っ込まれ。</p>

<blockquote><p>uniq を前に持って来い</p></blockquote>

<p>ActiveRecord::Relation の uniq は DISTINCT を付けてくれるので DB 側で処理される。
ところが pluck は Array が返ってくるので Array#uniq になってしまう。</p>

<p>実際に実行してみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">014</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s2">&quot;test&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="n">title</span> <span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;tag&quot;</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;title1&quot;</span><span class="p">,</span> <span class="s2">&quot;title2&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">015</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s2">&quot;test&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="no">DISTINCT</span> <span class="n">title</span> <span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;tag&quot;</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;title1&quot;</span><span class="p">,</span> <span class="s2">&quot;title2&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>もちろん結果は同じだけど DB で処理できることは DB に任せたほうがいいよね。
件数増えると結構差が出ると思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.emacs を一年に一回消してる]]></title>
    <link href="http://yoshiori.github.io/blog/2013/01/30/dot-emacs-renewal/"/>
    <updated>2013-01-30T19:10:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2013/01/30/dot-emacs-renewal</id>
    <content type="html"><![CDATA[<h3>ここ何年か .emacs と .zsh は一年に一回くらいの頻度で全消ししてる。</h3>

<p>なんか古い emacs の設定とか色々入ってて秘伝のタレみたいになっちゃうのが .emacs 的な印象なんだけど、
やっぱり自分でもなんとかしたいなぁと思って思い切って <code>rm -rm .emacs</code> してみたら結構良かったので一年に一回くらいの頻度で消すようにしてる。</p>

<p>大掃除とかじゃなく一から作りなおさないとなんか秘伝のタレ的なの残っちゃうので結構おすすめ。</p>

<p>今回は emacs24 に完全移行って事て anything → helm した。
 あと、ここ数年は Mac しか使ってないので OS の判定とかもしなくした。</p>

<h3>emacs24 の package-install 便利</h3>

<p>なんかほぼ使いたいものはこれで入れられるし、入れると勝手に require してくれちゃうみたいで、
メジャーモードとかはインストールしたらそのまま使えた。</p>

<p>リポジトリだけ追加したので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;package</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;package-archives</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;melpa&quot;</span> <span class="o">.</span> <span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">package-initialize</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>を追加した。</p>

<h3>anythong(helm) 無いと生きていけない</h3>

<p>脳みその容量が全然足りないので、便利そうな elisp 見つけてもショートカットとか覚えられない！！！
って事ばかりなので anything(helm) が無いと生きていけない。</p>

<p>「あー kill-ring の中見たい」って思った時も <code>kill-r</code> 位まで打てばこんな画面が出て
そのまま実行もできるし、ショートカットキーまで教えてくれる</p>

<p><img src="https://www.evernote.com/shard/s4/sh/b4d64aab-ff87-4331-bb87-2004fe12046f/dcd015be6f071df8ab5987ae3f4e1b86/res/bb06b1a0-a5f9-48f2-9bd9-e094991fd278/skitch.png?resizeSmall&width=832"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; -*- Mode: Emacs-Lisp ; Coding: utf-8 -*-</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;helm</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;helm-config</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">helm-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-helm</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">helm</span> <span class="ss">:sources</span> <span class="o">&#39;</span><span class="p">(</span>
</span><span class='line'>                   <span class="nv">helm-c-source-buffers-list</span>
</span><span class='line'>                   <span class="nv">helm-c-source-recentf</span>
</span><span class='line'>                   <span class="nv">helm-c-source-files-in-current-dir</span>
</span><span class='line'>                   <span class="nv">helm-c-source-mac-spotlight</span>
</span><span class='line'>                   <span class="nv">helm-c-source-buffer-not-found</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:buffer</span> <span class="s">&quot;*my helm*&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-x b&quot;</span><span class="p">)</span> <span class="ss">&#39;my-helm</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-x&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-M-x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">helm-samewindow</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">push</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;*helm-M-x*&quot;</span><span class="p">)</span> <span class="nv">popwin:special-display-config</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; emacsの終了時に、履歴を保存する</span>
</span><span class='line'><span class="p">(</span><span class="nv">remove-hook</span> <span class="ss">&#39;kill-emacs-hook</span> <span class="ss">&#39;helm-c-adaptive-save-history</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; ディレイは0.2秒</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">helm-input-idle-delay</span> <span class="mf">0.02</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; 候補のディレクトリが一つしかない場合に、自動的に展開しない</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">helm-ff-auto-update-initial-value</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>今のところこんな簡単な設定。</p>

<p>まだどうも helm の find-file に慣れないのでどうにかしたいなぁ……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails プロジェクトをはじめる手順]]></title>
    <link href="http://yoshiori.github.io/blog/2012/08/14/rails-start/"/>
    <updated>2012-08-14T15:25:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2012/08/14/rails-start</id>
    <content type="html"><![CDATA[<p>とりあえず現状の俺の理解での
rails プロジェクトをはじめる手順をまとめてみた。</p>

<ul>
<li>rspec</li>
<li>guard</li>
</ul>


<p>をデフォで使う感じ</p>

<h2>プロジェクトの作成</h2>

<pre><code>$ rails new rails_start
$ cd rails_start
</code></pre>

<h2>git init と git-flow init</h2>

<pre><code>$ git init
$ git add .gitignore Gemfile Gemfile.lock README.rdoc Rakefile app config config.ru db doc lib log public script test vendor
$ git commit -m init 
$ git flow init
</code></pre>

<h2>RSpec と guard 使うようにする</h2>

<pre><code>$ git flow feature start add_rspec_guard
$ emacs Gemfile 
</code></pre>

<p>で、下記追加</p>

<div><script src='https://gist.github.com/3346958.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<pre><code>$ bundle install
$ git rm -r test/
$ rails g rspec:install
$ guard init
$ git add Guardfile Gemfile Gemfile.lock .rspec spec/
$ git commit -m 'add rspec and guard'
$ git flow feature finish add_rspec_guard
</code></pre>

<h2>下準備完了</h2>

<p>あとは</p>

<pre><code>$ guard
</code></pre>

<p>でテスト書きながら始める。</p>

<p>で、いいのかなぁ？……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress の トップページを markdown で書く]]></title>
    <link href="http://yoshiori.github.io/blog/2012/07/13/octopress-index-dot-html/"/>
    <updated>2012-07-13T17:35:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2012/07/13/octopress-index-dot-html</id>
    <content type="html"><![CDATA[<p>なんか Octopress の標準のトップは最新の記事をただ羅列しててあんまり美しくないし
検索とかのインデックスに記事の内容が分散して載っちゃうしで気に喰わないので弄ってみた。</p>

<p>ただ直すだけなら <code>source/index.html</code> を修正すればいいんだけど
折角 Octopress にして markdown で書けるのに HTML 手描きとかイヤンなので markdown で書いてみた。</p>

<ol>
<li><code>source/index.html</code> をおもむろに削除</li>
<li><code>source/index.markdown</code> を作成</li>
</ol>


<p>で、出来た。</p>

<p><code>source/index.markdown</code> のメタ情報は</p>

<pre><code>---
layout: page
title: 
date: 2012-07-13 17:04
comments: false
sharing: true
footer: false
---
</code></pre>

<p>みたいな感じで <code>title</code> 要素を空にしておけばタイトルも上に出る日付も出ないので良い感じになった。</p>

<p>ついでに標準だと上にあるナビゲーションの <code>blog</code> って項目押すとトップに飛ぶようになっててなんか違うので
<code>source/_includes/custom/navigation.html</code> を良しなに修正すればおｋ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress でブログページではなく新しいページを作る方法]]></title>
    <link href="http://yoshiori.github.io/blog/2012/07/13/new-page/"/>
    <updated>2012-07-13T14:27:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2012/07/13/new-page</id>
    <content type="html"><![CDATA[<p>どうやるのかなーと思って <code>Rakefile</code> 見てたら見つけた。</p>

<pre><code> &gt; rake new_page['test']
</code></pre>

<p>で、<code>source/</code> の下に</p>

<pre><code>source
└── test
    └─index.markdown         
</code></pre>

<p>って作成される。</p>

<p>中見てみたら <code>new_post['title']</code> で作った奴と何も変わらなかったので好きにかけますね！！！</p>

<p>一応テストで作ってみた → <a href="http://yoshiori.github.io/test/">■</a></p>

<p>出来たディレクトリ下(上記で言えば source/test/ )に他にページを作りたいときは
そこに <code>****.markdown</code> ってファイルを作って、同じように</p>

<pre><code>---
layout: page
title: "hoge"
date: 2012-07-13 14:27
comments: true
categories: 
---
</code></pre>

<p>みたいな感じで書けば おｋ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress のサイドバーに Coderwall Badges を表示]]></title>
    <link href="http://yoshiori.github.io/blog/2012/07/12/coderwall-badges/"/>
    <updated>2012-07-12T16:55:00+09:00</updated>
    <id>http://yoshiori.github.io/blog/2012/07/12/coderwall-badges</id>
    <content type="html"><![CDATA[<p>Octpress のサイドバーに Coderwall の Badge を表示したいなと思ったので作ってみた。</p>

<p><code>source/_includes/asides/coderwall.html</code></p>

<p>に下記ファイルを保存</p>

<div><script src='https://gist.github.com/3096534.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p><code>_config.yaml</code> の 49 行目くらいの <code>default_asides</code> に <code>asides/coderwall.html</code> を追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">asides/github.html</span><span class="p-Indicator">,</span> <span class="nv">asides/coderwall.html</span><span class="p-Indicator">,</span> <span class="nv">asides/twitter.html</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>同じく <code>_config.yaml</code> の下の方にユーザー名を書いてあげる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Coderwall badges</span>
</span><span class='line'><span class="l-Scalar-Plain">coderwall_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yoshiori</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、サイドバーに表示されます。</p>

<p><img class="post" src="https://img.skitch.com/20120712-btk6k5wjbisfq4wwifsedpmmgm.png"></p>
]]></content>
  </entry>
  
</feed>
