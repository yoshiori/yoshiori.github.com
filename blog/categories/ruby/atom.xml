<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Yoshiori Blog]]></title>
  <link href="http://yoshiori.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://yoshiori.github.com/"/>
  <updated>2013-02-10T23:48:09+09:00</updated>
  <id>http://yoshiori.github.com/</id>
  <author>
    <name><![CDATA[Yoshiori SHOJI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【解決済み】FactoryGirl の relation の定義の仕方がよくわからない＞＜]]></title>
    <link href="http://yoshiori.github.com/blog/2013/02/03/factory-girl-relation/"/>
    <updated>2013-02-03T22:09:00+09:00</updated>
    <id>http://yoshiori.github.com/blog/2013/02/03/factory-girl-relation</id>
    <content type="html"><![CDATA[<p>FactoryGirl で relation 定義したいんだけど、具体的には</p>

<p><code>ruby
class User &lt; ActiveRecord::Base
  has_many :tasks
end
class Task &lt; ActiveRecord::Base
  belongs_to :user
  validates :user, :presence =&gt; true
end
</code>
こんな 2 つのモデルで</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>users.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;tasks do</span>
</span><span class='line'><span class="sr">  [</span>
</span><span class='line'><span class="sr">   FactoryGirl.create(:task) ,</span>
</span><span class='line'><span class="sr">  ]</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tasks.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:task</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;user</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>みたいな定義をしておくと……</p>

<p>```</p>

<pre><code> Failure/Error: Unable to find matching line from backtrace
 SystemStackError:
     stack level too deep
</code></pre>

<p>```</p>

<p>まぁ、メッセージの通り循環参照になっちゃうからダメなのは分かる。</p>

<p>でも、<code>:user</code> の宣言から <code>tasks</code> 外すと
<code>ruby
FactoryGirl.create(:user).tasks
</code>
で何も返ってこないし、逆に <code>:task</code> の方で <code>user</code> 外すと
今度は <code>presence</code> のバリデーションに引っかかっちゃう</p>

<p>絶対書き方間違えてるせいなんだけど、どうやったらいいのかわからない＞＜
教えてエロイ人！！！！</p>

<p>追記</p>

<p><blockquote><p>@yoshiori こんな感じでどうでしょうか https://t.co/ScRDRvLK</p><footer><strong>@naoty_k</strong> <cite><a href='https://twitter.com/naoty_k/status/298061407499468801'>twitter.com/naoty_k/status/&hellip;</a></cite></footer></blockquote>
<div><script src='https://gist.github.com/4701800.js'></script>
<noscript><pre><code>FactoryGirl.define do
  factory :user do
    after(:create) do |user|
      FactoryGirl.create_list(:task, 10, user_id: user.id)
    end
  end
  
  factory :task do
    trait :with_user do
      user
    end
  end
end</code></pre></noscript></div>
</p>

<p>と教えてもらいました</p>

<p><blockquote><p>@yoshiori すいません、さっきのは循環しそうなので、修正しました。 https://t.co/ScRDRvLK</p><footer><strong>@naoty_k</strong> <cite><a href='https://twitter.com/naoty_k/status/298062728004788224'>twitter.com/naoty_k/status/&hellip;</a></cite></footer></blockquote></p>

<p>とのことでしたが僕の手元では <code>trait</code> 使わなくても行けました！！！
ありがとうございます！！！</p>

<p>他にも
<blockquote><p>@yoshiori こうでどうだろうか http://t.co/Sf1oc9OV</p><footer><strong>@rosylilly</strong> <cite><a href='https://twitter.com/rosylilly/status/298062237988442114'>twitter.com/rosylilly/status/&hellip;</a></cite></footer></blockquote></p>

<p><blockquote><p>@yoshiori userの定義に、after :create do … end でtasksを追加するとよさそうー</p><footer><strong>@tomoya55</strong> <cite><a href='https://twitter.com/tomoya55/status/298064513360605184'>twitter.com/tomoya55/status/&hellip;</a></cite></footer></blockquote></p>

<p>といろいろな方が教えてくれました！！！
ありがとうございます！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord::Relation#pluck 使うときは Array が返ってくるの忘れちゃいけない]]></title>
    <link href="http://yoshiori.github.com/blog/2013/01/30/use-pluck-uniq/"/>
    <updated>2013-01-30T20:38:00+09:00</updated>
    <id>http://yoshiori.github.com/blog/2013/01/30/use-pluck-uniq</id>
    <content type="html"><![CDATA[<p>元々こんなコードがあった
<code>ruby
Post.where(:tag =&gt; "test").map(&amp;:title).uniq
</code></p>

<p>で、title しか使ってないんだからいちいち ActiveRecode のオブジェクト作って取り出すより pluck 使うように修正した</p>

<p><code>ruby
Post.where(:tag =&gt; "test").pluck(:title).uniq
</code></p>

<p>そう、俺はここで満足してしまった……で、pull request 出した結果突っ込まれ。</p>

<blockquote><p>uniq を前に持って来い</p></blockquote>

<p>ActiveRecord::Relation の uniq は DISTINCT を付けてくれるので DB 側で処理される。
ところが pluck は Array が返ってくるので Array#uniq になってしまう。</p>

<p>実際に実行してみると</p>

<p><code>ruby
irb(main):014:0&gt; Post.where(:tag =&gt; "test").pluck(:title).uniq
   (3.4ms)  SELECT title FROM "posts" WHERE "posts"."tag" = 'test'
=&gt; ["title1", "title2"]
irb(main):015:0&gt; Post.where(:tag =&gt; "test").uniq.pluck(:title)
   (5.3ms)  SELECT DISTINCT title FROM "posts" WHERE "posts"."tag" = 'test'
=&gt; ["title1", "title2"]
</code></p>

<p>もちろん結果は同じだけど DB で処理できることは DB に任せたほうがいいよね。
件数増えると結構差が出ると思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails プロジェクトをはじめる手順]]></title>
    <link href="http://yoshiori.github.com/blog/2012/08/14/rails-start/"/>
    <updated>2012-08-14T15:25:00+09:00</updated>
    <id>http://yoshiori.github.com/blog/2012/08/14/rails-start</id>
    <content type="html"><![CDATA[<p>とりあえず現状の俺の理解での
rails プロジェクトをはじめる手順をまとめてみた。</p>

<ul>
<li>rspec</li>
<li>guard</li>
</ul>


<p>をデフォで使う感じ</p>

<h2>プロジェクトの作成</h2>

<pre><code>$ rails new rails_start
$ cd rails_start
</code></pre>

<h2>git init と git-flow init</h2>

<pre><code>$ git init
$ git add .gitignore Gemfile Gemfile.lock README.rdoc Rakefile app config config.ru db doc lib log public script test vendor
$ git commit -m init 
$ git flow init
</code></pre>

<h2>RSpec と guard 使うようにする</h2>

<pre><code>$ git flow feature start add_rspec_guard
$ emacs Gemfile 
</code></pre>

<p>で、下記追加</p>

<p><div><script src='https://gist.github.com/3346958.js'></script>
<noscript><pre><code>group :test, :development do
  gem 'rspec-rails'
  gem 'guard'
  gem 'guard-rspec'
  gem 'growl', :require =&gt; false # for Mac
  gem 'libnotify', :require =&gt; false # for *nix
end</code></pre></noscript></div>
</p>

<pre><code>$ bundle install
$ git rm -r test/
$ rails g rspec:install
$ guard init
$ git add Guardfile Gemfile Gemfile.lock .rspec spec/
$ git commit -m 'add rspec and guard'
$ git flow feature finish add_rspec_guard
</code></pre>

<h2>下準備完了</h2>

<p>あとは</p>

<pre><code>$ guard
</code></pre>

<p>でテスト書きながら始める。</p>

<p>で、いいのかなぁ？……</p>
]]></content>
  </entry>
  
</feed>
